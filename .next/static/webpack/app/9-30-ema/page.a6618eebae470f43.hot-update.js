"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/9-30-ema/page",{

/***/ "(app-pages-browser)/./utils/pipelineStatus.ts":
/*!*********************************!*\
  !*** ./utils/pipelineStatus.ts ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatTimestamp: function() { return /* binding */ formatTimestamp; },\n/* harmony export */   getPipelineStatus: function() { return /* binding */ getPipelineStatus; },\n/* harmony export */   triggerPipeline: function() { return /* binding */ triggerPipeline; }\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(app-pages-browser)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(\"https://mxdyomqyvrwytuqzpvwk.supabase.co\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im14ZHlvbXF5dnJ3eXR1cXpwdndrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI3NDU2MDQsImV4cCI6MjA2ODMyMTYwNH0.CIlrapAL257aC8gYPItCM0QJXS4MhbP5IJp2UcZCCSA\");\nasync function getPipelineStatus() {\n    try {\n        // Get the latest OHLC data timestamp instead of pipeline timestamp\n        const { data, error } = await supabase.from(\"ohlc_data\").select(\"timestamp\").order(\"timestamp\", {\n            ascending: false\n        }).limit(1);\n        if (error) throw error;\n        const lastRunAt = data && data.length > 0 ? data[0].timestamp : null;\n        // For isRunning status, we still need to check the pipeline status\n        const { data: pipelineData, error: pipelineError } = await supabase.from(\"processing_state\").select(\"status\").eq(\"function_name\", \"pipeline\").eq(\"stock_id\", 0).eq(\"timeframe\", \"global\").order(\"last_run_at\", {\n            ascending: false\n        }).limit(1);\n        const isRunning = !pipelineError && pipelineData && pipelineData.length > 0 ? pipelineData[0].status === \"processing\" : false;\n        return {\n            lastRunAt,\n            isRunning\n        };\n    } catch (error) {\n        console.error(\"Error getting pipeline status:\", error);\n        return {\n            lastRunAt: null,\n            isRunning: false\n        };\n    }\n}\nasync function triggerPipeline() {\n    try {\n        const res = await fetch(\"https://mxdyomqyvrwytuqzpvwk.functions.supabase.co/pipeline\", {\n            method: \"POST\",\n            headers: {\n                \"Authorization\": \"Bearer \".concat(\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im14ZHlvbXF5dnJ3eXR1cXpwdndrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI3NDU2MDQsImV4cCI6MjA2ODMyMTYwNH0.CIlrapAL257aC8gYPItCM0QJXS4MhbP5IJp2UcZCCSA\")\n            }\n        });\n        const result = await res.json();\n        if (!res.ok) {\n            throw new Error(result.error || \"Failed to trigger pipeline\");\n        }\n        return {\n            success: true\n        };\n    } catch (error) {\n        console.error(\"Error triggering pipeline:\", error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n}\nfunction formatTimestamp(timestamp) {\n    if (!timestamp) return \"-\";\n    const date = new Date(timestamp);\n    const istDate = new Date(date.getTime() + 5.5 * 60 * 60 * 1000); // Convert to IST\n    const day = istDate.getUTCDate().toString().padStart(2, \"0\");\n    const month = istDate.toLocaleString(\"en-US\", {\n        month: \"short\"\n    });\n    const year = istDate.getUTCFullYear().toString().slice(-2);\n    const hours = istDate.getUTCHours().toString().padStart(2, \"0\");\n    const minutes = istDate.getUTCMinutes().toString().padStart(2, \"0\");\n    return \"\".concat(day, \"-\").concat(month, \"-\").concat(year, \" \").concat(hours, \":\").concat(minutes);\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3V0aWxzL3BpcGVsaW5lU3RhdHVzLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBcUQ7QUFFckQsTUFBTUMsV0FBV0QsbUVBQVlBLENBQzNCRSwwQ0FBb0MsRUFDcENBLGtOQUF5QztBQVFwQyxlQUFlSTtJQUNwQixJQUFJO1FBQ0YsbUVBQW1FO1FBQ25FLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxLQUFLLEVBQUUsR0FBRyxNQUFNUCxTQUMzQlEsSUFBSSxDQUFDLGFBQ0xDLE1BQU0sQ0FBQyxhQUNQQyxLQUFLLENBQUMsYUFBYTtZQUFFQyxXQUFXO1FBQU0sR0FDdENDLEtBQUssQ0FBQztRQUVULElBQUlMLE9BQU8sTUFBTUE7UUFFakIsTUFBTU0sWUFBWVAsUUFBUUEsS0FBS1EsTUFBTSxHQUFHLElBQUlSLElBQUksQ0FBQyxFQUFFLENBQUNTLFNBQVMsR0FBRztRQUVoRSxtRUFBbUU7UUFDbkUsTUFBTSxFQUFFVCxNQUFNVSxZQUFZLEVBQUVULE9BQU9VLGFBQWEsRUFBRSxHQUFHLE1BQU1qQixTQUN4RFEsSUFBSSxDQUFDLG9CQUNMQyxNQUFNLENBQUMsVUFDUFMsRUFBRSxDQUFDLGlCQUFpQixZQUNwQkEsRUFBRSxDQUFDLFlBQVksR0FDZkEsRUFBRSxDQUFDLGFBQWEsVUFDaEJSLEtBQUssQ0FBQyxlQUFlO1lBQUVDLFdBQVc7UUFBTSxHQUN4Q0MsS0FBSyxDQUFDO1FBRVQsTUFBTU8sWUFBWSxDQUFDRixpQkFBaUJELGdCQUFnQkEsYUFBYUYsTUFBTSxHQUFHLElBQUlFLFlBQVksQ0FBQyxFQUFFLENBQUNJLE1BQU0sS0FBSyxlQUFlO1FBRXhILE9BQU87WUFDTFA7WUFDQU07UUFDRjtJQUNGLEVBQUUsT0FBT1osT0FBTztRQUNkYyxRQUFRZCxLQUFLLENBQUMsa0NBQWtDQTtRQUNoRCxPQUFPO1lBQ0xNLFdBQVc7WUFDWE0sV0FBVztRQUNiO0lBQ0Y7QUFDRjtBQUVPLGVBQWVHO0lBQ3BCLElBQUk7UUFDRixNQUFNQyxNQUFNLE1BQU1DLE1BQU0sK0RBQStEO1lBQ3JGQyxRQUFRO1lBQ1JDLFNBQVM7Z0JBQ1AsaUJBQWlCLFVBQW9ELE9BQTFDekIsa05BQXlDO1lBQ3RFO1FBQ0Y7UUFFQSxNQUFNMEIsU0FBUyxNQUFNSixJQUFJSyxJQUFJO1FBRTdCLElBQUksQ0FBQ0wsSUFBSU0sRUFBRSxFQUFFO1lBQ1gsTUFBTSxJQUFJQyxNQUFNSCxPQUFPcEIsS0FBSyxJQUFJO1FBQ2xDO1FBRUEsT0FBTztZQUFFd0IsU0FBUztRQUFLO0lBQ3pCLEVBQUUsT0FBT3hCLE9BQVk7UUFDbkJjLFFBQVFkLEtBQUssQ0FBQyw4QkFBOEJBO1FBQzVDLE9BQU87WUFBRXdCLFNBQVM7WUFBT3hCLE9BQU9BLE1BQU15QixPQUFPO1FBQUM7SUFDaEQ7QUFDRjtBQUVPLFNBQVNDLGdCQUFnQmxCLFNBQXdCO0lBQ3RELElBQUksQ0FBQ0EsV0FBVyxPQUFPO0lBRXZCLE1BQU1tQixPQUFPLElBQUlDLEtBQUtwQjtJQUN0QixNQUFNcUIsVUFBVSxJQUFJRCxLQUFLRCxLQUFLRyxPQUFPLEtBQUssTUFBTSxLQUFLLEtBQUssT0FBTyxpQkFBaUI7SUFFbEYsTUFBTUMsTUFBTUYsUUFBUUcsVUFBVSxHQUFHQyxRQUFRLEdBQUdDLFFBQVEsQ0FBQyxHQUFHO0lBQ3hELE1BQU1DLFFBQVFOLFFBQVFPLGNBQWMsQ0FBQyxTQUFTO1FBQUVELE9BQU87SUFBUTtJQUMvRCxNQUFNRSxPQUFPUixRQUFRUyxjQUFjLEdBQUdMLFFBQVEsR0FBR00sS0FBSyxDQUFDLENBQUM7SUFDeEQsTUFBTUMsUUFBUVgsUUFBUVksV0FBVyxHQUFHUixRQUFRLEdBQUdDLFFBQVEsQ0FBQyxHQUFHO0lBQzNELE1BQU1RLFVBQVViLFFBQVFjLGFBQWEsR0FBR1YsUUFBUSxHQUFHQyxRQUFRLENBQUMsR0FBRztJQUUvRCxPQUFPLEdBQVVDLE9BQVBKLEtBQUksS0FBWU0sT0FBVEYsT0FBTSxLQUFXSyxPQUFSSCxNQUFLLEtBQVlLLE9BQVRGLE9BQU0sS0FBVyxPQUFSRTtBQUM3QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi91dGlscy9waXBlbGluZVN0YXR1cy50cz85YmE2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUNsaWVudCB9IGZyb20gJ0BzdXBhYmFzZS9zdXBhYmFzZS1qcyc7XG5cbmNvbnN0IHN1cGFiYXNlID0gY3JlYXRlQ2xpZW50KFxuICBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9VUkwhLFxuICBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWSFcbik7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGlwZWxpbmVTdGF0dXMge1xuICBsYXN0UnVuQXQ6IHN0cmluZyB8IG51bGw7XG4gIGlzUnVubmluZzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFBpcGVsaW5lU3RhdHVzKCk6IFByb21pc2U8UGlwZWxpbmVTdGF0dXM+IHtcbiAgdHJ5IHtcbiAgICAvLyBHZXQgdGhlIGxhdGVzdCBPSExDIGRhdGEgdGltZXN0YW1wIGluc3RlYWQgb2YgcGlwZWxpbmUgdGltZXN0YW1wXG4gICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgIC5mcm9tKCdvaGxjX2RhdGEnKVxuICAgICAgLnNlbGVjdCgndGltZXN0YW1wJylcbiAgICAgIC5vcmRlcigndGltZXN0YW1wJywgeyBhc2NlbmRpbmc6IGZhbHNlIH0pXG4gICAgICAubGltaXQoMSk7XG5cbiAgICBpZiAoZXJyb3IpIHRocm93IGVycm9yO1xuICAgIFxuICAgIGNvbnN0IGxhc3RSdW5BdCA9IGRhdGEgJiYgZGF0YS5sZW5ndGggPiAwID8gZGF0YVswXS50aW1lc3RhbXAgOiBudWxsO1xuICAgIFxuICAgIC8vIEZvciBpc1J1bm5pbmcgc3RhdHVzLCB3ZSBzdGlsbCBuZWVkIHRvIGNoZWNrIHRoZSBwaXBlbGluZSBzdGF0dXNcbiAgICBjb25zdCB7IGRhdGE6IHBpcGVsaW5lRGF0YSwgZXJyb3I6IHBpcGVsaW5lRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAuZnJvbSgncHJvY2Vzc2luZ19zdGF0ZScpXG4gICAgICAuc2VsZWN0KCdzdGF0dXMnKVxuICAgICAgLmVxKCdmdW5jdGlvbl9uYW1lJywgJ3BpcGVsaW5lJylcbiAgICAgIC5lcSgnc3RvY2tfaWQnLCAwKVxuICAgICAgLmVxKCd0aW1lZnJhbWUnLCAnZ2xvYmFsJylcbiAgICAgIC5vcmRlcignbGFzdF9ydW5fYXQnLCB7IGFzY2VuZGluZzogZmFsc2UgfSlcbiAgICAgIC5saW1pdCgxKTtcblxuICAgIGNvbnN0IGlzUnVubmluZyA9ICFwaXBlbGluZUVycm9yICYmIHBpcGVsaW5lRGF0YSAmJiBwaXBlbGluZURhdGEubGVuZ3RoID4gMCA/IHBpcGVsaW5lRGF0YVswXS5zdGF0dXMgPT09ICdwcm9jZXNzaW5nJyA6IGZhbHNlO1xuICAgIFxuICAgIHJldHVybiB7XG4gICAgICBsYXN0UnVuQXQsXG4gICAgICBpc1J1bm5pbmdcbiAgICB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGdldHRpbmcgcGlwZWxpbmUgc3RhdHVzOicsIGVycm9yKTtcbiAgICByZXR1cm4ge1xuICAgICAgbGFzdFJ1bkF0OiBudWxsLFxuICAgICAgaXNSdW5uaW5nOiBmYWxzZVxuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHRyaWdnZXJQaXBlbGluZSgpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgZXJyb3I/OiBzdHJpbmcgfT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKCdodHRwczovL214ZHlvbXF5dnJ3eXR1cXpwdndrLmZ1bmN0aW9ucy5zdXBhYmFzZS5jby9waXBlbGluZScsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQXV0aG9yaXphdGlvbic6IGBCZWFyZXIgJHtwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWX1gLFxuICAgICAgfSxcbiAgICB9KTtcbiAgICBcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXMuanNvbigpO1xuICAgIFxuICAgIGlmICghcmVzLm9rKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocmVzdWx0LmVycm9yIHx8ICdGYWlsZWQgdG8gdHJpZ2dlciBwaXBlbGluZScpO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlIH07XG4gIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciB0cmlnZ2VyaW5nIHBpcGVsaW5lOicsIGVycm9yKTtcbiAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6IGVycm9yLm1lc3NhZ2UgfTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0VGltZXN0YW1wKHRpbWVzdGFtcDogc3RyaW5nIHwgbnVsbCk6IHN0cmluZyB7XG4gIGlmICghdGltZXN0YW1wKSByZXR1cm4gJy0nO1xuICBcbiAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHRpbWVzdGFtcCk7XG4gIGNvbnN0IGlzdERhdGUgPSBuZXcgRGF0ZShkYXRlLmdldFRpbWUoKSArIDUuNSAqIDYwICogNjAgKiAxMDAwKTsgLy8gQ29udmVydCB0byBJU1RcbiAgXG4gIGNvbnN0IGRheSA9IGlzdERhdGUuZ2V0VVRDRGF0ZSgpLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgJzAnKTtcbiAgY29uc3QgbW9udGggPSBpc3REYXRlLnRvTG9jYWxlU3RyaW5nKCdlbi1VUycsIHsgbW9udGg6ICdzaG9ydCcgfSk7XG4gIGNvbnN0IHllYXIgPSBpc3REYXRlLmdldFVUQ0Z1bGxZZWFyKCkudG9TdHJpbmcoKS5zbGljZSgtMik7XG4gIGNvbnN0IGhvdXJzID0gaXN0RGF0ZS5nZXRVVENIb3VycygpLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgJzAnKTtcbiAgY29uc3QgbWludXRlcyA9IGlzdERhdGUuZ2V0VVRDTWludXRlcygpLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgJzAnKTtcbiAgXG4gIHJldHVybiBgJHtkYXl9LSR7bW9udGh9LSR7eWVhcn0gJHtob3Vyc306JHttaW51dGVzfWA7XG59ICJdLCJuYW1lcyI6WyJjcmVhdGVDbGllbnQiLCJzdXBhYmFzZSIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19TVVBBQkFTRV9VUkwiLCJORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWSIsImdldFBpcGVsaW5lU3RhdHVzIiwiZGF0YSIsImVycm9yIiwiZnJvbSIsInNlbGVjdCIsIm9yZGVyIiwiYXNjZW5kaW5nIiwibGltaXQiLCJsYXN0UnVuQXQiLCJsZW5ndGgiLCJ0aW1lc3RhbXAiLCJwaXBlbGluZURhdGEiLCJwaXBlbGluZUVycm9yIiwiZXEiLCJpc1J1bm5pbmciLCJzdGF0dXMiLCJjb25zb2xlIiwidHJpZ2dlclBpcGVsaW5lIiwicmVzIiwiZmV0Y2giLCJtZXRob2QiLCJoZWFkZXJzIiwicmVzdWx0IiwianNvbiIsIm9rIiwiRXJyb3IiLCJzdWNjZXNzIiwibWVzc2FnZSIsImZvcm1hdFRpbWVzdGFtcCIsImRhdGUiLCJEYXRlIiwiaXN0RGF0ZSIsImdldFRpbWUiLCJkYXkiLCJnZXRVVENEYXRlIiwidG9TdHJpbmciLCJwYWRTdGFydCIsIm1vbnRoIiwidG9Mb2NhbGVTdHJpbmciLCJ5ZWFyIiwiZ2V0VVRDRnVsbFllYXIiLCJzbGljZSIsImhvdXJzIiwiZ2V0VVRDSG91cnMiLCJtaW51dGVzIiwiZ2V0VVRDTWludXRlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./utils/pipelineStatus.ts\n"));

/***/ })

});